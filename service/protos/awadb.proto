syntax = "proto3";

package awadb_grpc;

option go_package = "awadb.io/go/pb_grpc";

service AwaDBServer {
  rpc Create(DBMeta) returns (ResponseStatus) {}

  rpc CheckTable(DBTableName) returns (TableStatus) {}
  rpc QueryTableDetail(DBTableName) returns (TableDetail) {}
  rpc DropDB(DBName) returns (ResponseStatus) {}
  rpc DropTable(TableName) returns (ResponseStatus) {}
  rpc ShowTables(DBName) returns (TableNames) {}
  rpc DescTable(TableName) returns (TableMeta) {}

  rpc AddFields(DBMeta) returns (ResponseStatus) {}
  rpc AddOrUpdate(Documents) returns (ResponseStatus) {}
  rpc Get(DocCondition) returns (Documents) {}
  rpc Search(SearchRequest) returns (SearchResponse) {}
  rpc Delete(DocCondition) returns (ResponseStatus) {}
  
}

message DBName {
  optional string name = 1;
}

message TableName {
  optional string name = 1;
}

message DBTableName {
  optional string db_name = 1;
  optional string table_name = 2;
}

message DBMeta {
  optional string db_name = 1;
  optional string desc = 2; 
  repeated TableMeta tables_meta = 3;
}

message FieldMeta {
  optional string name = 1;
  optional FieldType type = 2;
  optional bool is_index = 3;
  optional bool is_store = 4;
  optional bool reindex = 5;
  optional VectorMeta vec_meta = 6;
  optional string desc = 7;
  optional string embedding_model = 8;
  optional string words_tokenizer = 9;
}

message TableNames {
  repeated string name=1;
}

message TableMeta {
  optional string name = 1;
  optional string desc = 2;
  repeated FieldMeta fields_meta = 3;
}

message TableDetail {
  bool query_status = 1;
  optional int32 current_valid_docs = 2;
  optional int32 total_docs = 3;
  optional int32 deleted_docs = 4;
  optional uint64 table_mem_bytes = 5;
  optional uint64 vectors_index_bytes = 6;
  optional uint64 vectors_mem_bytes = 7;
  optional uint64 filters_index_bytes = 8;
  optional uint64 bitmap_mem_bytes = 9;
}

message TableStatus {
  bool is_existed = 1;
  optional DBMeta exist_table = 2;
  repeated string db_names = 3;
}

enum FieldType {
  INT = 0;
  LONG = 1;
  FLOAT = 2;
  DOUBLE = 3;
  STRING = 4;
  MULTI_STRING = 5;
  VECTOR = 6;
  KEYWORD = 7;
}

enum MultiVectorLogicOp {
  AND = 0;
  OR = 1;
}

message VectorMeta {
  optional FieldType data_type = 1;
  optional int32 dimension = 2;
  optional string store_type = 3;
  optional string store_param = 4;
  optional bool has_source = 5;
  optional bool is_normalization = 6;
}

message DocCondition {
  string db_name = 1;
  string table_name = 2;
  repeated bytes ids = 3;
  map<string, string> filter_fields = 4; // default all intersection
  optional bool include_all_fields = 5; 
  repeated string not_include_fields = 6;
  optional int32 limit = 7;
  repeated string pack_fields = 8;
  repeated RangeFilter range_filters = 9;
  repeated TermFilter term_filters = 10;
}

message Field {
  optional string name = 1;
  optional bytes value = 2;
  optional FieldType type = 3;
  optional string source = 4;
  repeated string mul_str_value = 5;
}

message Document {
  optional bytes id = 1;
  repeated Field fields = 2;
}

message Documents {
  optional string db_name = 1;
  optional string table_name = 2;
  repeated Document docs = 3;
}

message TermFilter {
  optional string field_name = 1;
  optional string value = 2;
  optional int32 is_union = 3;        // 0: intersect, 1: union, 2: not in
}

message RangeFilter {
  optional string field_name = 1;
  optional bytes lower_value = 2;
  optional bytes upper_value = 3;
  optional bool include_lower = 4;
  optional bool include_upper = 5;
}

message VectorQuery {
  optional string field_name = 1;
  optional bytes value = 2;
  optional float min_score = 3;
  optional float max_score = 4;
  optional float boost = 5;
  optional bool is_boost = 6;
  optional string retrieval_type = 7;
}

message Query {
  repeated VectorQuery vec_queries = 1;
  repeated RangeFilter range_filters = 2;
  repeated TermFilter term_filters = 3;
  optional MultiVectorLogicOp vecs_logic_op = 4;
}

message SearchRequest {
  optional string db_name = 1;
  optional string table_name = 2;
  repeated VectorQuery vec_queries = 3;
  repeated string page_text_queries = 4;
  repeated TermFilter term_filters = 5;
  repeated RangeFilter range_filters = 6; 
  optional int32 topn = 7;
  optional string retrieval_params = 8; 
  optional string online_log_level = 9;
  optional bool brute_force_search = 10;
  optional bool is_pack_all_fields = 11;
  repeated string pack_fields = 12; 
  optional MultiVectorLogicOp mul_vec_logic_op = 13;
  optional bool is_l2 = 14;
  repeated Query queries = 15;
}

enum SearchResultCode {
  SUCCESS = 0;
  INDEX_NOT_TRAINED = 1;
  SEARCH_ERROR = 2; 
  DB_NOT_FOUND = 3;
  TABLE_NOT_FOUND = 4;
}

message ResultItem {
  float score = 1;
  repeated Field fields = 2;
}

message SearchResult {
  optional int32 total = 1;
  optional string msg = 2;
  repeated ResultItem result_items = 3;
}

message SearchResponse {
  optional string db_name = 1;
  optional string table_name = 2;
  repeated SearchResult results = 3;
  optional string online_log_message = 4;
  optional SearchResultCode result_code = 5;
}

enum ResponseCode {
  INPUT_PARAMETER_ERROR = 0;
  OK = 200;
  TIME_OUT = 201;
  INTERNAL_ERROR = 202;
  NETWORK_ERROR = 203;
  TABLE_EXIST = 204;
}

message ResponseStatus {
  ResponseCode code = 1;
  string output_info = 2;
}

