# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gamma_api

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CacheInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CacheInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCacheInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CacheInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CacheInfo
    def FieldName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CacheInfo
    def CacheSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(2)
def CacheInfoStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddFieldName(builder, fieldName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fieldName), 0)
def CacheInfoAddFieldName(builder, fieldName):
    """This method is deprecated. Please switch to AddFieldName."""
    return AddFieldName(builder, fieldName)
def AddCacheSize(builder, cacheSize): builder.PrependInt32Slot(1, cacheSize, 0)
def CacheInfoAddCacheSize(builder, cacheSize):
    """This method is deprecated. Please switch to AddCacheSize."""
    return AddCacheSize(builder, cacheSize)
def End(builder): return builder.EndObject()
def CacheInfoEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)