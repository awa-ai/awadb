# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gamma_api

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Request(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Request()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Request
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Request
    def ReqNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Request
    def Topn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Request
    def BruteForceSearch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Request
    def VecFields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gamma_api.VectorQuery import VectorQuery
            obj = VectorQuery()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Request
    def VecFieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Request
    def VecFieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Request
    def Fields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Request
    def FieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Request
    def FieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Request
    def RangeFilters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gamma_api.RangeFilter import RangeFilter
            obj = RangeFilter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Request
    def RangeFiltersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Request
    def RangeFiltersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Request
    def TermFilters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gamma_api.TermFilter import TermFilter
            obj = TermFilter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Request
    def TermFiltersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Request
    def TermFiltersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Request
    def RetrievalParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Request
    def HasRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Request
    def OnlineLogLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Request
    def MultiVectorRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Request
    def L2Sqrt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(12)
def RequestStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddReqNum(builder, reqNum): builder.PrependInt32Slot(0, reqNum, 0)
def RequestAddReqNum(builder, reqNum):
    """This method is deprecated. Please switch to AddReqNum."""
    return AddReqNum(builder, reqNum)
def AddTopn(builder, topn): builder.PrependInt32Slot(1, topn, 0)
def RequestAddTopn(builder, topn):
    """This method is deprecated. Please switch to AddTopn."""
    return AddTopn(builder, topn)
def AddBruteForceSearch(builder, bruteForceSearch): builder.PrependInt32Slot(2, bruteForceSearch, 0)
def RequestAddBruteForceSearch(builder, bruteForceSearch):
    """This method is deprecated. Please switch to AddBruteForceSearch."""
    return AddBruteForceSearch(builder, bruteForceSearch)
def AddVecFields(builder, vecFields): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(vecFields), 0)
def RequestAddVecFields(builder, vecFields):
    """This method is deprecated. Please switch to AddVecFields."""
    return AddVecFields(builder, vecFields)
def StartVecFieldsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RequestStartVecFieldsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartVecFieldsVector(builder, numElems)
def AddFields(builder, fields): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(fields), 0)
def RequestAddFields(builder, fields):
    """This method is deprecated. Please switch to AddFields."""
    return AddFields(builder, fields)
def StartFieldsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RequestStartFieldsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartFieldsVector(builder, numElems)
def AddRangeFilters(builder, rangeFilters): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rangeFilters), 0)
def RequestAddRangeFilters(builder, rangeFilters):
    """This method is deprecated. Please switch to AddRangeFilters."""
    return AddRangeFilters(builder, rangeFilters)
def StartRangeFiltersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RequestStartRangeFiltersVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRangeFiltersVector(builder, numElems)
def AddTermFilters(builder, termFilters): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(termFilters), 0)
def RequestAddTermFilters(builder, termFilters):
    """This method is deprecated. Please switch to AddTermFilters."""
    return AddTermFilters(builder, termFilters)
def StartTermFiltersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RequestStartTermFiltersVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTermFiltersVector(builder, numElems)
def AddRetrievalParams(builder, retrievalParams): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(retrievalParams), 0)
def RequestAddRetrievalParams(builder, retrievalParams):
    """This method is deprecated. Please switch to AddRetrievalParams."""
    return AddRetrievalParams(builder, retrievalParams)
def AddHasRank(builder, hasRank): builder.PrependBoolSlot(8, hasRank, 0)
def RequestAddHasRank(builder, hasRank):
    """This method is deprecated. Please switch to AddHasRank."""
    return AddHasRank(builder, hasRank)
def AddOnlineLogLevel(builder, onlineLogLevel): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(onlineLogLevel), 0)
def RequestAddOnlineLogLevel(builder, onlineLogLevel):
    """This method is deprecated. Please switch to AddOnlineLogLevel."""
    return AddOnlineLogLevel(builder, onlineLogLevel)
def AddMultiVectorRank(builder, multiVectorRank): builder.PrependInt32Slot(10, multiVectorRank, 0)
def RequestAddMultiVectorRank(builder, multiVectorRank):
    """This method is deprecated. Please switch to AddMultiVectorRank."""
    return AddMultiVectorRank(builder, multiVectorRank)
def AddL2Sqrt(builder, l2Sqrt): builder.PrependBoolSlot(11, l2Sqrt, 0)
def RequestAddL2Sqrt(builder, l2Sqrt):
    """This method is deprecated. Please switch to AddL2Sqrt."""
    return AddL2Sqrt(builder, l2Sqrt)
def End(builder): return builder.EndObject()
def RequestEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)