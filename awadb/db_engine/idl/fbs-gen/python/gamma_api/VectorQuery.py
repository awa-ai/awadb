# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gamma_api

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VectorQuery(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VectorQuery()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVectorQuery(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VectorQuery
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VectorQuery
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VectorQuery
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # VectorQuery
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # VectorQuery
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorQuery
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # VectorQuery
    def MinScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VectorQuery
    def MaxScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VectorQuery
    def Boost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VectorQuery
    def HasBoost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # VectorQuery
    def RetrievalType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(7)
def VectorQueryStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def VectorQueryAddName(builder, name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, name)
def AddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def VectorQueryAddValue(builder, value):
    """This method is deprecated. Please switch to AddValue."""
    return AddValue(builder, value)
def StartValueVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def VectorQueryStartValueVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartValueVector(builder, numElems)
def AddMinScore(builder, minScore): builder.PrependFloat64Slot(2, minScore, 0.0)
def VectorQueryAddMinScore(builder, minScore):
    """This method is deprecated. Please switch to AddMinScore."""
    return AddMinScore(builder, minScore)
def AddMaxScore(builder, maxScore): builder.PrependFloat64Slot(3, maxScore, 0.0)
def VectorQueryAddMaxScore(builder, maxScore):
    """This method is deprecated. Please switch to AddMaxScore."""
    return AddMaxScore(builder, maxScore)
def AddBoost(builder, boost): builder.PrependFloat64Slot(4, boost, 0.0)
def VectorQueryAddBoost(builder, boost):
    """This method is deprecated. Please switch to AddBoost."""
    return AddBoost(builder, boost)
def AddHasBoost(builder, hasBoost): builder.PrependInt32Slot(5, hasBoost, 0)
def VectorQueryAddHasBoost(builder, hasBoost):
    """This method is deprecated. Please switch to AddHasBoost."""
    return AddHasBoost(builder, hasBoost)
def AddRetrievalType(builder, retrievalType): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(retrievalType), 0)
def VectorQueryAddRetrievalType(builder, retrievalType):
    """This method is deprecated. Please switch to AddRetrievalType."""
    return AddRetrievalType(builder, retrievalType)
def End(builder): return builder.EndObject()
def VectorQueryEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)