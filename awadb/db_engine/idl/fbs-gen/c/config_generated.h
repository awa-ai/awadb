// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONFIG_GAMMA_API_H_
#define FLATBUFFERS_GENERATED_CONFIG_GAMMA_API_H_

#include "flatbuffers/flatbuffers.h"

namespace gamma_api {

struct CacheInfo;
struct CacheInfoBuilder;

struct Config;
struct ConfigBuilder;

struct CacheInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CacheInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIELD_NAME = 4,
    VT_CACHE_SIZE = 6
  };
  const flatbuffers::String *field_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FIELD_NAME);
  }
  int32_t cache_size() const {
    return GetField<int32_t>(VT_CACHE_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FIELD_NAME) &&
           verifier.VerifyString(field_name()) &&
           VerifyField<int32_t>(verifier, VT_CACHE_SIZE) &&
           verifier.EndTable();
  }
};

struct CacheInfoBuilder {
  typedef CacheInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_field_name(flatbuffers::Offset<flatbuffers::String> field_name) {
    fbb_.AddOffset(CacheInfo::VT_FIELD_NAME, field_name);
  }
  void add_cache_size(int32_t cache_size) {
    fbb_.AddElement<int32_t>(CacheInfo::VT_CACHE_SIZE, cache_size, 0);
  }
  explicit CacheInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CacheInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CacheInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<CacheInfo> CreateCacheInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> field_name = 0,
    int32_t cache_size = 0) {
  CacheInfoBuilder builder_(_fbb);
  builder_.add_cache_size(cache_size);
  builder_.add_field_name(field_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<CacheInfo> CreateCacheInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *field_name = nullptr,
    int32_t cache_size = 0) {
  auto field_name__ = field_name ? _fbb.CreateString(field_name) : 0;
  return gamma_api::CreateCacheInfo(
      _fbb,
      field_name__,
      cache_size);
}

struct Config FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4,
    VT_LOG_DIR = 6,
    VT_CACHE_INFOS = 8
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  const flatbuffers::String *log_dir() const {
    return GetPointer<const flatbuffers::String *>(VT_LOG_DIR);
  }
  const flatbuffers::Vector<flatbuffers::Offset<gamma_api::CacheInfo>> *cache_infos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<gamma_api::CacheInfo>> *>(VT_CACHE_INFOS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyOffset(verifier, VT_LOG_DIR) &&
           verifier.VerifyString(log_dir()) &&
           VerifyOffset(verifier, VT_CACHE_INFOS) &&
           verifier.VerifyVector(cache_infos()) &&
           verifier.VerifyVectorOfTables(cache_infos()) &&
           verifier.EndTable();
  }
};

struct ConfigBuilder {
  typedef Config Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(Config::VT_PATH, path);
  }
  void add_log_dir(flatbuffers::Offset<flatbuffers::String> log_dir) {
    fbb_.AddOffset(Config::VT_LOG_DIR, log_dir);
  }
  void add_cache_infos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<gamma_api::CacheInfo>>> cache_infos) {
    fbb_.AddOffset(Config::VT_CACHE_INFOS, cache_infos);
  }
  explicit ConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Config> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Config>(end);
    return o;
  }
};

inline flatbuffers::Offset<Config> CreateConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    flatbuffers::Offset<flatbuffers::String> log_dir = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<gamma_api::CacheInfo>>> cache_infos = 0) {
  ConfigBuilder builder_(_fbb);
  builder_.add_cache_infos(cache_infos);
  builder_.add_log_dir(log_dir);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<Config> CreateConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr,
    const char *log_dir = nullptr,
    const std::vector<flatbuffers::Offset<gamma_api::CacheInfo>> *cache_infos = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  auto log_dir__ = log_dir ? _fbb.CreateString(log_dir) : 0;
  auto cache_infos__ = cache_infos ? _fbb.CreateVector<flatbuffers::Offset<gamma_api::CacheInfo>>(*cache_infos) : 0;
  return gamma_api::CreateConfig(
      _fbb,
      path__,
      log_dir__,
      cache_infos__);
}

inline const gamma_api::Config *GetConfig(const void *buf) {
  return flatbuffers::GetRoot<gamma_api::Config>(buf);
}

inline const gamma_api::Config *GetSizePrefixedConfig(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gamma_api::Config>(buf);
}

inline bool VerifyConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gamma_api::Config>(nullptr);
}

inline bool VerifySizePrefixedConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gamma_api::Config>(nullptr);
}

inline void FinishConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gamma_api::Config> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gamma_api::Config> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace gamma_api

#endif  // FLATBUFFERS_GENERATED_CONFIG_GAMMA_API_H_
