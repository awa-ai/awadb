// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BATCHRESULT_GAMMA_API_H_
#define FLATBUFFERS_GENERATED_BATCHRESULT_GAMMA_API_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace gamma_api {

struct BatchResult;
struct BatchResultBuilder;

struct BatchResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BatchResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODES = 4,
    VT_MSGS = 6
  };
  const flatbuffers::Vector<int32_t> *codes() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *msgs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_MSGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CODES) &&
           verifier.VerifyVector(codes()) &&
           VerifyOffset(verifier, VT_MSGS) &&
           verifier.VerifyVector(msgs()) &&
           verifier.VerifyVectorOfStrings(msgs()) &&
           verifier.EndTable();
  }
};

struct BatchResultBuilder {
  typedef BatchResult Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_codes(flatbuffers::Offset<flatbuffers::Vector<int32_t>> codes) {
    fbb_.AddOffset(BatchResult::VT_CODES, codes);
  }
  void add_msgs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> msgs) {
    fbb_.AddOffset(BatchResult::VT_MSGS, msgs);
  }
  explicit BatchResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<BatchResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BatchResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<BatchResult> CreateBatchResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> codes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> msgs = 0) {
  BatchResultBuilder builder_(_fbb);
  builder_.add_msgs(msgs);
  builder_.add_codes(codes);
  return builder_.Finish();
}

inline flatbuffers::Offset<BatchResult> CreateBatchResultDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *codes = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *msgs = nullptr) {
  auto codes__ = codes ? _fbb.CreateVector<int32_t>(*codes) : 0;
  auto msgs__ = msgs ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*msgs) : 0;
  return gamma_api::CreateBatchResult(
      _fbb,
      codes__,
      msgs__);
}

inline const gamma_api::BatchResult *GetBatchResult(const void *buf) {
  return flatbuffers::GetRoot<gamma_api::BatchResult>(buf);
}

inline const gamma_api::BatchResult *GetSizePrefixedBatchResult(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gamma_api::BatchResult>(buf);
}

inline bool VerifyBatchResultBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gamma_api::BatchResult>(nullptr);
}

inline bool VerifySizePrefixedBatchResultBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gamma_api::BatchResult>(nullptr);
}

inline void FinishBatchResultBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gamma_api::BatchResult> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBatchResultBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gamma_api::BatchResult> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace gamma_api

#endif  // FLATBUFFERS_GENERATED_BATCHRESULT_GAMMA_API_H_
