// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: awadb.proto

package awadb_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FieldType int32

const (
	FieldType_INT          FieldType = 0
	FieldType_LONG         FieldType = 1
	FieldType_FLOAT        FieldType = 2
	FieldType_DOUBLE       FieldType = 3
	FieldType_STRING       FieldType = 4
	FieldType_MULTI_STRING FieldType = 5
	FieldType_VECTOR       FieldType = 6
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0: "INT",
		1: "LONG",
		2: "FLOAT",
		3: "DOUBLE",
		4: "STRING",
		5: "MULTI_STRING",
		6: "VECTOR",
	}
	FieldType_value = map[string]int32{
		"INT":          0,
		"LONG":         1,
		"FLOAT":        2,
		"DOUBLE":       3,
		"STRING":       4,
		"MULTI_STRING": 5,
		"VECTOR":       6,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_awadb_proto_enumTypes[0].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_awadb_proto_enumTypes[0]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{0}
}

type MultiVectorLogicOp int32

const (
	MultiVectorLogicOp_AND MultiVectorLogicOp = 0
	MultiVectorLogicOp_OR  MultiVectorLogicOp = 1
)

// Enum value maps for MultiVectorLogicOp.
var (
	MultiVectorLogicOp_name = map[int32]string{
		0: "AND",
		1: "OR",
	}
	MultiVectorLogicOp_value = map[string]int32{
		"AND": 0,
		"OR":  1,
	}
)

func (x MultiVectorLogicOp) Enum() *MultiVectorLogicOp {
	p := new(MultiVectorLogicOp)
	*p = x
	return p
}

func (x MultiVectorLogicOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiVectorLogicOp) Descriptor() protoreflect.EnumDescriptor {
	return file_awadb_proto_enumTypes[1].Descriptor()
}

func (MultiVectorLogicOp) Type() protoreflect.EnumType {
	return &file_awadb_proto_enumTypes[1]
}

func (x MultiVectorLogicOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiVectorLogicOp.Descriptor instead.
func (MultiVectorLogicOp) EnumDescriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{1}
}

type MultiModelType int32

const (
	MultiModelType_TEXT   MultiModelType = 0
	MultiModelType_IMAGE  MultiModelType = 1
	MultiModelType_SPEECH MultiModelType = 2
	MultiModelType_VIDEO  MultiModelType = 3
)

// Enum value maps for MultiModelType.
var (
	MultiModelType_name = map[int32]string{
		0: "TEXT",
		1: "IMAGE",
		2: "SPEECH",
		3: "VIDEO",
	}
	MultiModelType_value = map[string]int32{
		"TEXT":   0,
		"IMAGE":  1,
		"SPEECH": 2,
		"VIDEO":  3,
	}
)

func (x MultiModelType) Enum() *MultiModelType {
	p := new(MultiModelType)
	*p = x
	return p
}

func (x MultiModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_awadb_proto_enumTypes[2].Descriptor()
}

func (MultiModelType) Type() protoreflect.EnumType {
	return &file_awadb_proto_enumTypes[2]
}

func (x MultiModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiModelType.Descriptor instead.
func (MultiModelType) EnumDescriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{2}
}

type SearchResultCode int32

const (
	SearchResultCode_SUCCESS           SearchResultCode = 0
	SearchResultCode_INDEX_NOT_TRAINED SearchResultCode = 1
	SearchResultCode_SEARCH_ERROR      SearchResultCode = 2
	SearchResultCode_DB_NOT_FOUND      SearchResultCode = 3
	SearchResultCode_TABLE_NOT_FOUND   SearchResultCode = 4
)

// Enum value maps for SearchResultCode.
var (
	SearchResultCode_name = map[int32]string{
		0: "SUCCESS",
		1: "INDEX_NOT_TRAINED",
		2: "SEARCH_ERROR",
		3: "DB_NOT_FOUND",
		4: "TABLE_NOT_FOUND",
	}
	SearchResultCode_value = map[string]int32{
		"SUCCESS":           0,
		"INDEX_NOT_TRAINED": 1,
		"SEARCH_ERROR":      2,
		"DB_NOT_FOUND":      3,
		"TABLE_NOT_FOUND":   4,
	}
)

func (x SearchResultCode) Enum() *SearchResultCode {
	p := new(SearchResultCode)
	*p = x
	return p
}

func (x SearchResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_awadb_proto_enumTypes[3].Descriptor()
}

func (SearchResultCode) Type() protoreflect.EnumType {
	return &file_awadb_proto_enumTypes[3]
}

func (x SearchResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchResultCode.Descriptor instead.
func (SearchResultCode) EnumDescriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{3}
}

type ResponseCode int32

const (
	ResponseCode_INPUT_PARAMETER_ERROR ResponseCode = 0
	ResponseCode_OK                    ResponseCode = 200
	ResponseCode_TIME_OUT              ResponseCode = 201
	ResponseCode_INTERNAL_ERROR        ResponseCode = 202
	ResponseCode_NETWORK_ERROR         ResponseCode = 203
)

// Enum value maps for ResponseCode.
var (
	ResponseCode_name = map[int32]string{
		0:   "INPUT_PARAMETER_ERROR",
		200: "OK",
		201: "TIME_OUT",
		202: "INTERNAL_ERROR",
		203: "NETWORK_ERROR",
	}
	ResponseCode_value = map[string]int32{
		"INPUT_PARAMETER_ERROR": 0,
		"OK":                    200,
		"TIME_OUT":              201,
		"INTERNAL_ERROR":        202,
		"NETWORK_ERROR":         203,
	}
)

func (x ResponseCode) Enum() *ResponseCode {
	p := new(ResponseCode)
	*p = x
	return p
}

func (x ResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_awadb_proto_enumTypes[4].Descriptor()
}

func (ResponseCode) Type() protoreflect.EnumType {
	return &file_awadb_proto_enumTypes[4]
}

func (x ResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseCode.Descriptor instead.
func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{4}
}

type DBName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *DBName) Reset() {
	*x = DBName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBName) ProtoMessage() {}

func (x *DBName) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBName.ProtoReflect.Descriptor instead.
func (*DBName) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{0}
}

func (x *DBName) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type TableName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *TableName) Reset() {
	*x = TableName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableName) ProtoMessage() {}

func (x *TableName) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableName.ProtoReflect.Descriptor instead.
func (*TableName) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{1}
}

func (x *TableName) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type DBTableName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName    *string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3,oneof" json:"db_name,omitempty"`
	TableName *string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3,oneof" json:"table_name,omitempty"`
}

func (x *DBTableName) Reset() {
	*x = DBTableName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBTableName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBTableName) ProtoMessage() {}

func (x *DBTableName) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBTableName.ProtoReflect.Descriptor instead.
func (*DBTableName) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{2}
}

func (x *DBTableName) GetDbName() string {
	if x != nil && x.DbName != nil {
		return *x.DbName
	}
	return ""
}

func (x *DBTableName) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type DBMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName     *string      `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3,oneof" json:"db_name,omitempty"`
	Desc       *string      `protobuf:"bytes,2,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	TablesMeta []*TableMeta `protobuf:"bytes,3,rep,name=tables_meta,json=tablesMeta,proto3" json:"tables_meta,omitempty"`
}

func (x *DBMeta) Reset() {
	*x = DBMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBMeta) ProtoMessage() {}

func (x *DBMeta) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBMeta.ProtoReflect.Descriptor instead.
func (*DBMeta) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{3}
}

func (x *DBMeta) GetDbName() string {
	if x != nil && x.DbName != nil {
		return *x.DbName
	}
	return ""
}

func (x *DBMeta) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *DBMeta) GetTablesMeta() []*TableMeta {
	if x != nil {
		return x.TablesMeta
	}
	return nil
}

type FieldMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string     `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type    *FieldType  `protobuf:"varint,2,opt,name=type,proto3,enum=awadb_grpc.FieldType,oneof" json:"type,omitempty"`
	IsIndex *bool       `protobuf:"varint,3,opt,name=is_index,json=isIndex,proto3,oneof" json:"is_index,omitempty"`
	IsStore *bool       `protobuf:"varint,4,opt,name=is_store,json=isStore,proto3,oneof" json:"is_store,omitempty"`
	Reindex *bool       `protobuf:"varint,5,opt,name=reindex,proto3,oneof" json:"reindex,omitempty"`
	VecMeta *VectorMeta `protobuf:"bytes,6,opt,name=vec_meta,json=vecMeta,proto3,oneof" json:"vec_meta,omitempty"`
}

func (x *FieldMeta) Reset() {
	*x = FieldMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMeta) ProtoMessage() {}

func (x *FieldMeta) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMeta.ProtoReflect.Descriptor instead.
func (*FieldMeta) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{4}
}

func (x *FieldMeta) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FieldMeta) GetType() FieldType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FieldType_INT
}

func (x *FieldMeta) GetIsIndex() bool {
	if x != nil && x.IsIndex != nil {
		return *x.IsIndex
	}
	return false
}

func (x *FieldMeta) GetIsStore() bool {
	if x != nil && x.IsStore != nil {
		return *x.IsStore
	}
	return false
}

func (x *FieldMeta) GetReindex() bool {
	if x != nil && x.Reindex != nil {
		return *x.Reindex
	}
	return false
}

func (x *FieldMeta) GetVecMeta() *VectorMeta {
	if x != nil {
		return x.VecMeta
	}
	return nil
}

type TableNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
}

func (x *TableNames) Reset() {
	*x = TableNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableNames) ProtoMessage() {}

func (x *TableNames) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableNames.ProtoReflect.Descriptor instead.
func (*TableNames) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{5}
}

func (x *TableNames) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type TableMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string      `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Desc       *string      `protobuf:"bytes,2,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	FieldsMeta []*FieldMeta `protobuf:"bytes,3,rep,name=fields_meta,json=fieldsMeta,proto3" json:"fields_meta,omitempty"`
}

func (x *TableMeta) Reset() {
	*x = TableMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMeta) ProtoMessage() {}

func (x *TableMeta) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMeta.ProtoReflect.Descriptor instead.
func (*TableMeta) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{6}
}

func (x *TableMeta) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TableMeta) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *TableMeta) GetFieldsMeta() []*FieldMeta {
	if x != nil {
		return x.FieldsMeta
	}
	return nil
}

type TableStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsExisted  bool    `protobuf:"varint,1,opt,name=is_existed,json=isExisted,proto3" json:"is_existed,omitempty"`
	ExistTable *DBMeta `protobuf:"bytes,2,opt,name=exist_table,json=existTable,proto3,oneof" json:"exist_table,omitempty"`
}

func (x *TableStatus) Reset() {
	*x = TableStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableStatus) ProtoMessage() {}

func (x *TableStatus) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableStatus.ProtoReflect.Descriptor instead.
func (*TableStatus) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{7}
}

func (x *TableStatus) GetIsExisted() bool {
	if x != nil {
		return x.IsExisted
	}
	return false
}

func (x *TableStatus) GetExistTable() *DBMeta {
	if x != nil {
		return x.ExistTable
	}
	return nil
}

type VectorMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType   *FieldType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=awadb_grpc.FieldType,oneof" json:"data_type,omitempty"`
	Dimension  *int32     `protobuf:"varint,2,opt,name=dimension,proto3,oneof" json:"dimension,omitempty"`
	StoreType  *string    `protobuf:"bytes,3,opt,name=store_type,json=storeType,proto3,oneof" json:"store_type,omitempty"`
	StoreParam *string    `protobuf:"bytes,4,opt,name=store_param,json=storeParam,proto3,oneof" json:"store_param,omitempty"`
	HasSource  *bool      `protobuf:"varint,5,opt,name=has_source,json=hasSource,proto3,oneof" json:"has_source,omitempty"`
}

func (x *VectorMeta) Reset() {
	*x = VectorMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorMeta) ProtoMessage() {}

func (x *VectorMeta) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorMeta.ProtoReflect.Descriptor instead.
func (*VectorMeta) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{8}
}

func (x *VectorMeta) GetDataType() FieldType {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return FieldType_INT
}

func (x *VectorMeta) GetDimension() int32 {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return 0
}

func (x *VectorMeta) GetStoreType() string {
	if x != nil && x.StoreType != nil {
		return *x.StoreType
	}
	return ""
}

func (x *VectorMeta) GetStoreParam() string {
	if x != nil && x.StoreParam != nil {
		return *x.StoreParam
	}
	return ""
}

func (x *VectorMeta) GetHasSource() bool {
	if x != nil && x.HasSource != nil {
		return *x.HasSource
	}
	return false
}

type DocCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName           string            `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	TableName        string            `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Ids              [][]byte          `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	FilterFields     map[string]string `protobuf:"bytes,4,rep,name=filter_fields,json=filterFields,proto3" json:"filter_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IncludeAllFields *bool             `protobuf:"varint,5,opt,name=include_all_fields,json=includeAllFields,proto3,oneof" json:"include_all_fields,omitempty"`
	NotIncludeFields []string          `protobuf:"bytes,6,rep,name=not_include_fields,json=notIncludeFields,proto3" json:"not_include_fields,omitempty"`
	Limit            *int32            `protobuf:"varint,7,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *DocCondition) Reset() {
	*x = DocCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocCondition) ProtoMessage() {}

func (x *DocCondition) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocCondition.ProtoReflect.Descriptor instead.
func (*DocCondition) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{9}
}

func (x *DocCondition) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DocCondition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DocCondition) GetIds() [][]byte {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DocCondition) GetFilterFields() map[string]string {
	if x != nil {
		return x.FilterFields
	}
	return nil
}

func (x *DocCondition) GetIncludeAllFields() bool {
	if x != nil && x.IncludeAllFields != nil {
		return *x.IncludeAllFields
	}
	return false
}

func (x *DocCondition) GetNotIncludeFields() []string {
	if x != nil {
		return x.NotIncludeFields
	}
	return nil
}

func (x *DocCondition) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string    `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Value       []byte     `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Type        *FieldType `protobuf:"varint,3,opt,name=type,proto3,enum=awadb_grpc.FieldType,oneof" json:"type,omitempty"`
	Source      *string    `protobuf:"bytes,4,opt,name=source,proto3,oneof" json:"source,omitempty"`
	MulStrValue []string   `protobuf:"bytes,5,rep,name=mul_str_value,json=mulStrValue,proto3" json:"mul_str_value,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{10}
}

func (x *Field) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Field) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Field) GetType() FieldType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FieldType_INT
}

func (x *Field) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Field) GetMulStrValue() []string {
	if x != nil {
		return x.MulStrValue
	}
	return nil
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     []byte   `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Fields []*Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{11}
}

func (x *Document) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Document) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Documents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName    *string     `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3,oneof" json:"db_name,omitempty"`
	TableName *string     `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3,oneof" json:"table_name,omitempty"`
	Docs      []*Document `protobuf:"bytes,3,rep,name=docs,proto3" json:"docs,omitempty"`
}

func (x *Documents) Reset() {
	*x = Documents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Documents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Documents) ProtoMessage() {}

func (x *Documents) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Documents.ProtoReflect.Descriptor instead.
func (*Documents) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{12}
}

func (x *Documents) GetDbName() string {
	if x != nil && x.DbName != nil {
		return *x.DbName
	}
	return ""
}

func (x *Documents) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *Documents) GetDocs() []*Document {
	if x != nil {
		return x.Docs
	}
	return nil
}

type TermFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName *string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
	Value     *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	IsUnion   *int32  `protobuf:"varint,3,opt,name=is_union,json=isUnion,proto3,oneof" json:"is_union,omitempty"` // 0: intersect, 1: union, 2: not in
}

func (x *TermFilter) Reset() {
	*x = TermFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermFilter) ProtoMessage() {}

func (x *TermFilter) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermFilter.ProtoReflect.Descriptor instead.
func (*TermFilter) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{13}
}

func (x *TermFilter) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *TermFilter) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *TermFilter) GetIsUnion() int32 {
	if x != nil && x.IsUnion != nil {
		return *x.IsUnion
	}
	return 0
}

type RangeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName    *string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
	LowerValue   *string `protobuf:"bytes,2,opt,name=lower_value,json=lowerValue,proto3,oneof" json:"lower_value,omitempty"`
	UpperValue   *string `protobuf:"bytes,3,opt,name=upper_value,json=upperValue,proto3,oneof" json:"upper_value,omitempty"`
	IncludeLower *bool   `protobuf:"varint,4,opt,name=include_lower,json=includeLower,proto3,oneof" json:"include_lower,omitempty"`
	IncludeUpper *bool   `protobuf:"varint,5,opt,name=include_upper,json=includeUpper,proto3,oneof" json:"include_upper,omitempty"`
}

func (x *RangeFilter) Reset() {
	*x = RangeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeFilter) ProtoMessage() {}

func (x *RangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeFilter.ProtoReflect.Descriptor instead.
func (*RangeFilter) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{14}
}

func (x *RangeFilter) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *RangeFilter) GetLowerValue() string {
	if x != nil && x.LowerValue != nil {
		return *x.LowerValue
	}
	return ""
}

func (x *RangeFilter) GetUpperValue() string {
	if x != nil && x.UpperValue != nil {
		return *x.UpperValue
	}
	return ""
}

func (x *RangeFilter) GetIncludeLower() bool {
	if x != nil && x.IncludeLower != nil {
		return *x.IncludeLower
	}
	return false
}

func (x *RangeFilter) GetIncludeUpper() bool {
	if x != nil && x.IncludeUpper != nil {
		return *x.IncludeUpper
	}
	return false
}

type VectorQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName     *string  `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
	Value         []byte   `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	MinScore      *float32 `protobuf:"fixed32,3,opt,name=min_score,json=minScore,proto3,oneof" json:"min_score,omitempty"`
	MaxScore      *float32 `protobuf:"fixed32,4,opt,name=max_score,json=maxScore,proto3,oneof" json:"max_score,omitempty"`
	Boost         *float32 `protobuf:"fixed32,5,opt,name=boost,proto3,oneof" json:"boost,omitempty"`
	IsBoost       *bool    `protobuf:"varint,6,opt,name=is_boost,json=isBoost,proto3,oneof" json:"is_boost,omitempty"`
	RetrievalType *string  `protobuf:"bytes,7,opt,name=retrieval_type,json=retrievalType,proto3,oneof" json:"retrieval_type,omitempty"`
}

func (x *VectorQuery) Reset() {
	*x = VectorQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorQuery) ProtoMessage() {}

func (x *VectorQuery) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorQuery.ProtoReflect.Descriptor instead.
func (*VectorQuery) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{15}
}

func (x *VectorQuery) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *VectorQuery) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VectorQuery) GetMinScore() float32 {
	if x != nil && x.MinScore != nil {
		return *x.MinScore
	}
	return 0
}

func (x *VectorQuery) GetMaxScore() float32 {
	if x != nil && x.MaxScore != nil {
		return *x.MaxScore
	}
	return 0
}

func (x *VectorQuery) GetBoost() float32 {
	if x != nil && x.Boost != nil {
		return *x.Boost
	}
	return 0
}

func (x *VectorQuery) GetIsBoost() bool {
	if x != nil && x.IsBoost != nil {
		return *x.IsBoost
	}
	return false
}

func (x *VectorQuery) GetRetrievalType() string {
	if x != nil && x.RetrievalType != nil {
		return *x.RetrievalType
	}
	return ""
}

type TextQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName    *string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
	Value        *string   `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Terms        []string  `protobuf:"bytes,3,rep,name=terms,proto3" json:"terms,omitempty"`
	TermsWeight  []float32 `protobuf:"fixed32,4,rep,packed,name=terms_weight,json=termsWeight,proto3" json:"terms_weight,omitempty"`
	TermsGrammar *string   `protobuf:"bytes,5,opt,name=terms_grammar,json=termsGrammar,proto3,oneof" json:"terms_grammar,omitempty"`
}

func (x *TextQuery) Reset() {
	*x = TextQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextQuery) ProtoMessage() {}

func (x *TextQuery) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextQuery.ProtoReflect.Descriptor instead.
func (*TextQuery) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{16}
}

func (x *TextQuery) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *TextQuery) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *TextQuery) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *TextQuery) GetTermsWeight() []float32 {
	if x != nil {
		return x.TermsWeight
	}
	return nil
}

func (x *TextQuery) GetTermsGrammar() string {
	if x != nil && x.TermsGrammar != nil {
		return *x.TermsGrammar
	}
	return ""
}

type DataInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName      *string         `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
	Value          []byte          `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	MultiModelType *MultiModelType `protobuf:"varint,3,opt,name=multi_model_type,json=multiModelType,proto3,enum=awadb_grpc.MultiModelType,oneof" json:"multi_model_type,omitempty"`
	IsParse        *bool           `protobuf:"varint,4,opt,name=is_parse,json=isParse,proto3,oneof" json:"is_parse,omitempty"`
	TextParser     *string         `protobuf:"bytes,5,opt,name=text_parser,json=textParser,proto3,oneof" json:"text_parser,omitempty"`
	IsEmbedding    *bool           `protobuf:"varint,6,opt,name=is_embedding,json=isEmbedding,proto3,oneof" json:"is_embedding,omitempty"`
	EmbeddingModel *string         `protobuf:"bytes,7,opt,name=embedding_model,json=embeddingModel,proto3,oneof" json:"embedding_model,omitempty"`
}

func (x *DataInput) Reset() {
	*x = DataInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataInput) ProtoMessage() {}

func (x *DataInput) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataInput.ProtoReflect.Descriptor instead.
func (*DataInput) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{17}
}

func (x *DataInput) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *DataInput) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DataInput) GetMultiModelType() MultiModelType {
	if x != nil && x.MultiModelType != nil {
		return *x.MultiModelType
	}
	return MultiModelType_TEXT
}

func (x *DataInput) GetIsParse() bool {
	if x != nil && x.IsParse != nil {
		return *x.IsParse
	}
	return false
}

func (x *DataInput) GetTextParser() string {
	if x != nil && x.TextParser != nil {
		return *x.TextParser
	}
	return ""
}

func (x *DataInput) GetIsEmbedding() bool {
	if x != nil && x.IsEmbedding != nil {
		return *x.IsEmbedding
	}
	return false
}

func (x *DataInput) GetEmbeddingModel() string {
	if x != nil && x.EmbeddingModel != nil {
		return *x.EmbeddingModel
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextQueries  []*TextQuery   `protobuf:"bytes,1,rep,name=text_queries,json=textQueries,proto3" json:"text_queries,omitempty"`
	VecQueries   []*VectorQuery `protobuf:"bytes,2,rep,name=vec_queries,json=vecQueries,proto3" json:"vec_queries,omitempty"`
	RangeFilters []*RangeFilter `protobuf:"bytes,3,rep,name=range_filters,json=rangeFilters,proto3" json:"range_filters,omitempty"`
	DataInputs   []*DataInput   `protobuf:"bytes,4,rep,name=data_inputs,json=dataInputs,proto3" json:"data_inputs,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{18}
}

func (x *Query) GetTextQueries() []*TextQuery {
	if x != nil {
		return x.TextQueries
	}
	return nil
}

func (x *Query) GetVecQueries() []*VectorQuery {
	if x != nil {
		return x.VecQueries
	}
	return nil
}

func (x *Query) GetRangeFilters() []*RangeFilter {
	if x != nil {
		return x.RangeFilters
	}
	return nil
}

func (x *Query) GetDataInputs() []*DataInput {
	if x != nil {
		return x.DataInputs
	}
	return nil
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName    *string  `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3,oneof" json:"db_name,omitempty"`
	TableName *string  `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3,oneof" json:"table_name,omitempty"`
	Queries   []*Query `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
	// repeated VectorQuery vec_queries = 3;
	// repeated string page_text_queries = 4;
	// repeated TermFilter term_filters = 5;
	// repeated RangeFilter range_filters = 6;
	Topn             *int32              `protobuf:"varint,7,opt,name=topn,proto3,oneof" json:"topn,omitempty"`
	RetrievalParams  *string             `protobuf:"bytes,8,opt,name=retrieval_params,json=retrievalParams,proto3,oneof" json:"retrieval_params,omitempty"`
	OnlineLogLevel   *string             `protobuf:"bytes,9,opt,name=online_log_level,json=onlineLogLevel,proto3,oneof" json:"online_log_level,omitempty"`
	BruteForceSearch *bool               `protobuf:"varint,10,opt,name=brute_force_search,json=bruteForceSearch,proto3,oneof" json:"brute_force_search,omitempty"`
	IsPackAllFields  *bool               `protobuf:"varint,11,opt,name=is_pack_all_fields,json=isPackAllFields,proto3,oneof" json:"is_pack_all_fields,omitempty"`
	PackFields       []string            `protobuf:"bytes,12,rep,name=pack_fields,json=packFields,proto3" json:"pack_fields,omitempty"`
	MulVecLogicOp    *MultiVectorLogicOp `protobuf:"varint,13,opt,name=mul_vec_logic_op,json=mulVecLogicOp,proto3,enum=awadb_grpc.MultiVectorLogicOp,oneof" json:"mul_vec_logic_op,omitempty"`
	IsL2             *bool               `protobuf:"varint,14,opt,name=is_l2,json=isL2,proto3,oneof" json:"is_l2,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{19}
}

func (x *SearchRequest) GetDbName() string {
	if x != nil && x.DbName != nil {
		return *x.DbName
	}
	return ""
}

func (x *SearchRequest) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *SearchRequest) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *SearchRequest) GetTopn() int32 {
	if x != nil && x.Topn != nil {
		return *x.Topn
	}
	return 0
}

func (x *SearchRequest) GetRetrievalParams() string {
	if x != nil && x.RetrievalParams != nil {
		return *x.RetrievalParams
	}
	return ""
}

func (x *SearchRequest) GetOnlineLogLevel() string {
	if x != nil && x.OnlineLogLevel != nil {
		return *x.OnlineLogLevel
	}
	return ""
}

func (x *SearchRequest) GetBruteForceSearch() bool {
	if x != nil && x.BruteForceSearch != nil {
		return *x.BruteForceSearch
	}
	return false
}

func (x *SearchRequest) GetIsPackAllFields() bool {
	if x != nil && x.IsPackAllFields != nil {
		return *x.IsPackAllFields
	}
	return false
}

func (x *SearchRequest) GetPackFields() []string {
	if x != nil {
		return x.PackFields
	}
	return nil
}

func (x *SearchRequest) GetMulVecLogicOp() MultiVectorLogicOp {
	if x != nil && x.MulVecLogicOp != nil {
		return *x.MulVecLogicOp
	}
	return MultiVectorLogicOp_AND
}

func (x *SearchRequest) GetIsL2() bool {
	if x != nil && x.IsL2 != nil {
		return *x.IsL2
	}
	return false
}

type ResultItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score  float32  `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	Fields []*Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ResultItem) Reset() {
	*x = ResultItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultItem) ProtoMessage() {}

func (x *ResultItem) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultItem.ProtoReflect.Descriptor instead.
func (*ResultItem) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{20}
}

func (x *ResultItem) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ResultItem) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       *int32        `protobuf:"varint,1,opt,name=total,proto3,oneof" json:"total,omitempty"`
	Msg         *string       `protobuf:"bytes,2,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
	ResultItems []*ResultItem `protobuf:"bytes,3,rep,name=result_items,json=resultItems,proto3" json:"result_items,omitempty"`
}

func (x *SearchResult) Reset() {
	*x = SearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResult) ProtoMessage() {}

func (x *SearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResult.ProtoReflect.Descriptor instead.
func (*SearchResult) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{21}
}

func (x *SearchResult) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *SearchResult) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *SearchResult) GetResultItems() []*ResultItem {
	if x != nil {
		return x.ResultItems
	}
	return nil
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName           *string           `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3,oneof" json:"db_name,omitempty"`
	TableName        *string           `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3,oneof" json:"table_name,omitempty"`
	Results          []*SearchResult   `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	OnlineLogMessage *string           `protobuf:"bytes,4,opt,name=online_log_message,json=onlineLogMessage,proto3,oneof" json:"online_log_message,omitempty"`
	ResultCode       *SearchResultCode `protobuf:"varint,5,opt,name=result_code,json=resultCode,proto3,enum=awadb_grpc.SearchResultCode,oneof" json:"result_code,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{22}
}

func (x *SearchResponse) GetDbName() string {
	if x != nil && x.DbName != nil {
		return *x.DbName
	}
	return ""
}

func (x *SearchResponse) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *SearchResponse) GetResults() []*SearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchResponse) GetOnlineLogMessage() string {
	if x != nil && x.OnlineLogMessage != nil {
		return *x.OnlineLogMessage
	}
	return ""
}

func (x *SearchResponse) GetResultCode() SearchResultCode {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return SearchResultCode_SUCCESS
}

type ResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=awadb_grpc.ResponseCode" json:"code,omitempty"`
	OutputInfo string       `protobuf:"bytes,2,opt,name=output_info,json=outputInfo,proto3" json:"output_info,omitempty"`
}

func (x *ResponseStatus) Reset() {
	*x = ResponseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_awadb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatus) ProtoMessage() {}

func (x *ResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_awadb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatus.ProtoReflect.Descriptor instead.
func (*ResponseStatus) Descriptor() ([]byte, []int) {
	return file_awadb_proto_rawDescGZIP(), []int{23}
}

func (x *ResponseStatus) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_INPUT_PARAMETER_ERROR
}

func (x *ResponseStatus) GetOutputInfo() string {
	if x != nil {
		return x.OutputInfo
	}
	return ""
}

var File_awadb_proto protoreflect.FileDescriptor

var file_awadb_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x77, 0x61, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61,
	0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x22, 0x2a, 0x0a, 0x06, 0x44, 0x42, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x0b, 0x44, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x06, 0x44, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x07, 0x64,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x22,
	0xb0, 0x02, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07, 0x69, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x07, 0x72, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x76, 0x65, 0x63, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x48,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x65, 0x63, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x22, 0x20, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x22, 0x76,
	0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x0a, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x68,
	0x61, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x09, 0x68, 0x61, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x87, 0x03, 0x0a, 0x0c, 0x44, 0x6f,
	0x63, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x77,
	0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x53, 0x74, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x08, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x77, 0x61,
	0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a,
	0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x6f, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x77, 0x61,
	0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x07, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x22, 0xd6, 0x02, 0x0a,
	0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04,
	0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x07,
	0x69, 0x73, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x47, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72,
	0x22, 0xa1, 0x03, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x69, 0x73,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x22, 0xf1, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38,
	0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x65, 0x78,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x76, 0x65, 0x63, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x77, 0x61, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x36, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0xff, 0x04, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x6f, 0x70,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x72, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52,
	0x10, 0x62, 0x72, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x06, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63,
	0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x5f, 0x76,
	0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x4f,
	0x70, 0x48, 0x07, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x56, 0x65, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x4f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6c, 0x32, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4c, 0x32, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x6f, 0x70, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x62, 0x72, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6d, 0x75, 0x6c, 0x5f, 0x76, 0x65, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x6f, 0x70,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x32, 0x22, 0x4d, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x73, 0x67, 0x22, 0xbf, 0x02, 0x0a, 0x0e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x07,
	0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x10, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x77, 0x61,
	0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5f, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x77,
	0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2a, 0x5f, 0x0a, 0x09,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c,
	0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x25, 0x0a,
	0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x4f, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x52, 0x10, 0x01, 0x2a, 0x3c, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x50, 0x45, 0x45, 0x43, 0x48, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x03, 0x2a, 0x6f, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x04, 0x2a, 0x6a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0xc8, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x4f, 0x55, 0x54, 0x10, 0xc9, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xca, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xcb, 0x01, 0x32,
	0xbc, 0x06, 0x0a, 0x0b, 0x41, 0x77, 0x61, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x61, 0x77, 0x61, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x1a, 0x2e,
	0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x77, 0x61, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x17, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x06, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x42, 0x12, 0x12, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1a, 0x2e, 0x61, 0x77,
	0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x44, 0x72, 0x6f,
	0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1a, 0x2e,
	0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x53,
	0x68, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x61, 0x77, 0x61, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e,
	0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x44, 0x65, 0x73, 0x63, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x15, 0x2e, 0x61, 0x77,
	0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x12, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x1a, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x1a, 0x2e, 0x61, 0x77, 0x61, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18,
	0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x61, 0x77,
	0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18,
	0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x11, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e, 0x61, 0x77, 0x61, 0x64,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x2e, 0x61, 0x77,
	0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x42, 0x1c,
	0x5a, 0x1a, 0x61, 0x77, 0x61, 0x64, 0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x69, 0x64, 0x6c, 0x2f, 0x67,
	0x6f, 0x2f, 0x61, 0x77, 0x61, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_awadb_proto_rawDescOnce sync.Once
	file_awadb_proto_rawDescData = file_awadb_proto_rawDesc
)

func file_awadb_proto_rawDescGZIP() []byte {
	file_awadb_proto_rawDescOnce.Do(func() {
		file_awadb_proto_rawDescData = protoimpl.X.CompressGZIP(file_awadb_proto_rawDescData)
	})
	return file_awadb_proto_rawDescData
}

var file_awadb_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_awadb_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_awadb_proto_goTypes = []interface{}{
	(FieldType)(0),          // 0: awadb_grpc.FieldType
	(MultiVectorLogicOp)(0), // 1: awadb_grpc.MultiVectorLogicOp
	(MultiModelType)(0),     // 2: awadb_grpc.MultiModelType
	(SearchResultCode)(0),   // 3: awadb_grpc.SearchResultCode
	(ResponseCode)(0),       // 4: awadb_grpc.ResponseCode
	(*DBName)(nil),          // 5: awadb_grpc.DBName
	(*TableName)(nil),       // 6: awadb_grpc.TableName
	(*DBTableName)(nil),     // 7: awadb_grpc.DBTableName
	(*DBMeta)(nil),          // 8: awadb_grpc.DBMeta
	(*FieldMeta)(nil),       // 9: awadb_grpc.FieldMeta
	(*TableNames)(nil),      // 10: awadb_grpc.TableNames
	(*TableMeta)(nil),       // 11: awadb_grpc.TableMeta
	(*TableStatus)(nil),     // 12: awadb_grpc.TableStatus
	(*VectorMeta)(nil),      // 13: awadb_grpc.VectorMeta
	(*DocCondition)(nil),    // 14: awadb_grpc.DocCondition
	(*Field)(nil),           // 15: awadb_grpc.Field
	(*Document)(nil),        // 16: awadb_grpc.Document
	(*Documents)(nil),       // 17: awadb_grpc.Documents
	(*TermFilter)(nil),      // 18: awadb_grpc.TermFilter
	(*RangeFilter)(nil),     // 19: awadb_grpc.RangeFilter
	(*VectorQuery)(nil),     // 20: awadb_grpc.VectorQuery
	(*TextQuery)(nil),       // 21: awadb_grpc.TextQuery
	(*DataInput)(nil),       // 22: awadb_grpc.DataInput
	(*Query)(nil),           // 23: awadb_grpc.Query
	(*SearchRequest)(nil),   // 24: awadb_grpc.SearchRequest
	(*ResultItem)(nil),      // 25: awadb_grpc.ResultItem
	(*SearchResult)(nil),    // 26: awadb_grpc.SearchResult
	(*SearchResponse)(nil),  // 27: awadb_grpc.SearchResponse
	(*ResponseStatus)(nil),  // 28: awadb_grpc.ResponseStatus
	nil,                     // 29: awadb_grpc.DocCondition.FilterFieldsEntry
}
var file_awadb_proto_depIdxs = []int32{
	11, // 0: awadb_grpc.DBMeta.tables_meta:type_name -> awadb_grpc.TableMeta
	0,  // 1: awadb_grpc.FieldMeta.type:type_name -> awadb_grpc.FieldType
	13, // 2: awadb_grpc.FieldMeta.vec_meta:type_name -> awadb_grpc.VectorMeta
	9,  // 3: awadb_grpc.TableMeta.fields_meta:type_name -> awadb_grpc.FieldMeta
	8,  // 4: awadb_grpc.TableStatus.exist_table:type_name -> awadb_grpc.DBMeta
	0,  // 5: awadb_grpc.VectorMeta.data_type:type_name -> awadb_grpc.FieldType
	29, // 6: awadb_grpc.DocCondition.filter_fields:type_name -> awadb_grpc.DocCondition.FilterFieldsEntry
	0,  // 7: awadb_grpc.Field.type:type_name -> awadb_grpc.FieldType
	15, // 8: awadb_grpc.Document.fields:type_name -> awadb_grpc.Field
	16, // 9: awadb_grpc.Documents.docs:type_name -> awadb_grpc.Document
	2,  // 10: awadb_grpc.DataInput.multi_model_type:type_name -> awadb_grpc.MultiModelType
	21, // 11: awadb_grpc.Query.text_queries:type_name -> awadb_grpc.TextQuery
	20, // 12: awadb_grpc.Query.vec_queries:type_name -> awadb_grpc.VectorQuery
	19, // 13: awadb_grpc.Query.range_filters:type_name -> awadb_grpc.RangeFilter
	22, // 14: awadb_grpc.Query.data_inputs:type_name -> awadb_grpc.DataInput
	23, // 15: awadb_grpc.SearchRequest.queries:type_name -> awadb_grpc.Query
	1,  // 16: awadb_grpc.SearchRequest.mul_vec_logic_op:type_name -> awadb_grpc.MultiVectorLogicOp
	15, // 17: awadb_grpc.ResultItem.fields:type_name -> awadb_grpc.Field
	25, // 18: awadb_grpc.SearchResult.result_items:type_name -> awadb_grpc.ResultItem
	26, // 19: awadb_grpc.SearchResponse.results:type_name -> awadb_grpc.SearchResult
	3,  // 20: awadb_grpc.SearchResponse.result_code:type_name -> awadb_grpc.SearchResultCode
	4,  // 21: awadb_grpc.ResponseStatus.code:type_name -> awadb_grpc.ResponseCode
	8,  // 22: awadb_grpc.AwaDBServer.Create:input_type -> awadb_grpc.DBMeta
	7,  // 23: awadb_grpc.AwaDBServer.CheckTable:input_type -> awadb_grpc.DBTableName
	5,  // 24: awadb_grpc.AwaDBServer.DropDB:input_type -> awadb_grpc.DBName
	6,  // 25: awadb_grpc.AwaDBServer.DropTable:input_type -> awadb_grpc.TableName
	5,  // 26: awadb_grpc.AwaDBServer.ShowTables:input_type -> awadb_grpc.DBName
	6,  // 27: awadb_grpc.AwaDBServer.DescTable:input_type -> awadb_grpc.TableName
	8,  // 28: awadb_grpc.AwaDBServer.AddFields:input_type -> awadb_grpc.DBMeta
	17, // 29: awadb_grpc.AwaDBServer.AddOrUpdate:input_type -> awadb_grpc.Documents
	14, // 30: awadb_grpc.AwaDBServer.Get:input_type -> awadb_grpc.DocCondition
	24, // 31: awadb_grpc.AwaDBServer.Search:input_type -> awadb_grpc.SearchRequest
	14, // 32: awadb_grpc.AwaDBServer.Delete:input_type -> awadb_grpc.DocCondition
	23, // 33: awadb_grpc.AwaDBServer.QueryAnalyze:input_type -> awadb_grpc.Query
	14, // 34: awadb_grpc.AwaDBServer.GetDetail:input_type -> awadb_grpc.DocCondition
	28, // 35: awadb_grpc.AwaDBServer.Create:output_type -> awadb_grpc.ResponseStatus
	12, // 36: awadb_grpc.AwaDBServer.CheckTable:output_type -> awadb_grpc.TableStatus
	28, // 37: awadb_grpc.AwaDBServer.DropDB:output_type -> awadb_grpc.ResponseStatus
	28, // 38: awadb_grpc.AwaDBServer.DropTable:output_type -> awadb_grpc.ResponseStatus
	10, // 39: awadb_grpc.AwaDBServer.ShowTables:output_type -> awadb_grpc.TableNames
	11, // 40: awadb_grpc.AwaDBServer.DescTable:output_type -> awadb_grpc.TableMeta
	28, // 41: awadb_grpc.AwaDBServer.AddFields:output_type -> awadb_grpc.ResponseStatus
	28, // 42: awadb_grpc.AwaDBServer.AddOrUpdate:output_type -> awadb_grpc.ResponseStatus
	17, // 43: awadb_grpc.AwaDBServer.Get:output_type -> awadb_grpc.Documents
	27, // 44: awadb_grpc.AwaDBServer.Search:output_type -> awadb_grpc.SearchResponse
	28, // 45: awadb_grpc.AwaDBServer.Delete:output_type -> awadb_grpc.ResponseStatus
	23, // 46: awadb_grpc.AwaDBServer.QueryAnalyze:output_type -> awadb_grpc.Query
	17, // 47: awadb_grpc.AwaDBServer.GetDetail:output_type -> awadb_grpc.Documents
	35, // [35:48] is the sub-list for method output_type
	22, // [22:35] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_awadb_proto_init() }
func file_awadb_proto_init() {
	if File_awadb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_awadb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBTableName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Documents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_awadb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_awadb_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_awadb_proto_msgTypes[22].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_awadb_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_awadb_proto_goTypes,
		DependencyIndexes: file_awadb_proto_depIdxs,
		EnumInfos:         file_awadb_proto_enumTypes,
		MessageInfos:      file_awadb_proto_msgTypes,
	}.Build()
	File_awadb_proto = out.File
	file_awadb_proto_rawDesc = nil
	file_awadb_proto_goTypes = nil
	file_awadb_proto_depIdxs = nil
}
